c("hi", "there")
#created a vector but it is not saved
my_sring <- c("hi", "there")
#created a vector but it is not saved
my_string <- c("hi", "there")
#now I have named it and it has saved in my global environment as a charactor vector
rm my_sring
rm(my_sring)
dbl_var <- c(1, 2.5, 4.5)
# With the L suffix, you get an integer rather than a double
int_var <- c(1L, 6L, 10L)
# Use TRUE and FALSE (or T and F) to create logical vectors
log_var <- c(TRUE, FALSE, T, F)
chr_var <- c("these are", "some strings")
setwd("~/BCB546_R_Assignment")
x <- c(1,2,3)
y <- list(1,2,3)
z <- list(1:3, "a", c(TRUE, FALSE, TRUE), c(2.3, 5.9))
#this is a list that includes difference vectors within them
is.vector(list(1,2,3))
is.numeric(c(1L,2L,3L))
typeof(as.numeric(c(1L,2L,3L)))
unlist(y)
as.vector(y)
"A"<"a"
"A">"a"
NA
a <- c(Hello = 1 2 3 4)
a <- c(Hello = 1, 2, 3, 4)
names(a)
rm(a)
sex_char <- c("m", "m", "m")
sex_factor <- factor(sex_char, levels = c("m", "f"))
table(sex_char)
sex_char <- c("m", "m", "m", "f")
table(sex_char)
#can be used to get counts of things within a data set by following this (above)
mkdir("class_notes")
dir.create(class_notes)
dir()
dir.create("class_notes")
echo "class_notes/" >> .gitignore
lst <- list(1:3, "a", c(TRUE, FALSE, TRUE), c(2.3, 5.9))
names(lst) <- c("A","B","C","D")
# command 1:
lst[1][2]
# command 2:
lst[[1]][2]
# command 2:
lst[[1]][3]
# command 2:
lst[[3]][3]
install.packages("tidyverse")
install.packages("tidyr")
library(tidyr)
library(tidyverse)
dvst <- read_csv("https://raw.githubusercontent.com/vsbuffalo/bds-files/master/chapter-08-r/Dataset_S1.txt")
View(dvst)
dvst
head(dvst)
tail(dvst)
nrow(dvst)
library(tidyverse)
dvst
str(dvst)
dvst <- dvst
dvst -> dvst
dvst
`names<-`(dvst, dvst)
dvst <- read_csv("https://raw.githubusercontent.com/vsbuffalo/bds-files/master/chapter-08-r/Dataset_S1.txt")
save.image("C:/Users/domin/OneDrive - Iowa State University/Documents/BCB546_R_Assignment/Environment.RData")
summary(select(dvst,`total SNPs`))
# Here we also used `select` function. We'll talk about it soon.
filter(dvst,`total SNPs` >= 85)
# only gives the rows that have total SNPs greater than or equal to 85 (3 rows total)
filter(dvst, Pi > 16, `%GC` > 80)
# can filter more than one variable at once and get the rows for the objects that matches those variables
# dyplr by default does not modify your data
new_df <- filter(dvst, Pi > 16, `%GC` > 80)
# only makes new ojbect but does not print output
(new_df <- filter(dvst, Pi > 16, `%GC` > 80))
# makes new object and prints the output
filter(dvst, `total SNPs` %in% c(0,1,2))
# gives output of all values in total SNPs that equal 0,1,or 2
mutate(dvst, cent = start >= 25800000 & end <= 29700000)
# creates new column but will not add it to the origin dataset
# if we want to include it in the original dataset we must tell R that we want that
dvst <- mutate(dvst, cent = start >= 25800000 & end <= 29700000)
# it was now added to the dataset
dvst <- mutate(dvst,
diversity = Pi / (10*1000),
cent = start >= 25800000 & end <= 29700000)
# we only want to keep the new variables
transmute(dvst,
diversity = Pi / (10*1000),
cent = start >= 25800000 & end <= 29700000)
summary(select(dvst,`%GC`))
HighLowGC <- summary(select(dvst,`%GC`))
filter(dvst, `%GC`<= 0.08008 & >= 85.4855)
filter(dvst, `%GC`<= 0.08008 & = 85.4855)
filter(dvst, `%GC`= 0.08008 & = 85.4855)
filter(dvst, `%GC`= 0.08008 & 85.4855)
filter(dvst, `%GC`== 0.08008 & 85.4855)
filter(dvst, `%GC`== 0.08008 | 85.4855)
filter(dvst, `%GC`== 0.08008 | 85.4855)
filter(dvst, `%GC`== 0.08008)
filter(dvst, `%GC`= 0.08008)
filter(dvst, `%GC`= 0.8008)
filter(dvst, `%GC`== 0.8008)
summary(select(dvst,`%GC`))
filter(dvst, `%GC` == 0.8008)
filter(dvst, `%GC` < 1)
filter(dvst, `%GC` > 45.4)
filter(dvst, `%GC` > 85.4)
filter(dvst, `total SNPs`== 0)
filter(dvst, `total Bases` < 1000)
filter(dvst, `%GC` < 1)
summary(select(dvst, `Divergence`))
filter(dvst, `Divergence` > 1)
between(dvst, `%GC`, 1, 2)
between(dvst, `%GC`, 1)
filter(dvst, `%GC`== min(`%GC`))
filter(dvst, `%GC`== max(`%GC`))
filter(dvst, `Divergence` max(`Divergence`))
filter(dvst, `Divergence`== max(`Divergence`))
filter(dvst, between(`%GC`, mean(`%GC`)-5, mean(`%GC`)+5))
sum(filter(dvst, cent))
sum(filter(dvst, cent==TRUE))
nrow(filter(dvst, cent))
save.image("C:/Users/domin/OneDrive - Iowa State University/Documents/BCB546_R_Assignment/Environment.RData")
#arrange is basically the sort function, looks at first column first and uses the second column to break ties
arrange(dvst, cent, `%GC`)
#select lets you select only a few colums at once instead of all of them
dvst <- rename(dvst, total.SNPs = `total SNPs`,
total.Bases = `total Bases`,
unique.SNPs = `unique SNPs`,
reference.Bases = `reference Bases`,
percent.GC = `%GC`) #renaming all the columns that require ` `!
colnames(dvst)
summarise(dvst, GC = mean(percent.GC, na.rm = TRUE), averageSNPs=mean(total.SNPs,
na.rm = TRUE), allSNPs=sum(total.SNPs))
by_cent <- group_by(dvst, cent)
summarise(by_cent, GC = mean(percent.GC, na.rm = TRUE), averageSNPs=mean(total.SNPs, na.rm = TRUE), allSNPs=sum(total.SNPs))
save.image("C:/Users/domin/OneDrive - Iowa State University/Documents/BCB546_R_Assignment/Environment.RData")
